AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: Provision an AWS Account with Control Tower through Service Catalog
Parameters:
  AccountName:
    Description: "Account name, the new managed Account will be created with this name."
    Type: String
    AllowedPattern : "[a-zA-Z0-9][a-zA-Z0-9._-]*"
  AccountEmail:
    Description: "Account email, must be unique for each AWS Account."
    Type: String
    AllowedPattern : "[^\\s@]+@[^\\s@]+\\.[^\\s@]+"
  SSOUserFirstName:
    Description:  "SSO user first name."
    Type: String
    AllowedPattern : ".+"
  SSOUserLastName:
    Description:  "SSO user last name."
    Type: String
    AllowedPattern : ".+"
  SSOUserEmail:
    Description: "SSO user email. A new SSO user will be created for this email, if it does not exist. This SSO user will be associated with the new managed Account."
    Type: String
    AllowedPattern : "[^\\s@]+@[^\\s@]+\\.[^\\s@]+"
  ManagedOrganizationalUnit:
    Description: "Managed organizational unit. The managed Account will be placed under this Organizational Unit."
    Type: String

Resources:

  ControlTowerServiceCatalogLookup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ControlTowerServiceCatalogLookupCustomResource.Arn

  ControlTowerServiceCatalogLookupCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - servicecatalog:DescribeProductAsAdmin
                - servicecatalog:ListProvisioningArtifacts
              Resource: '*'
      InlineCode: |
        import boto3
        import cfnresponse

        sc = boto3.client("servicecatalog")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            ct_account_factory_sc_product = sc.describe_product_as_admin(
                Name='AWS Control Tower Account Factory'
            )

            ct_account_factory_sc_product_detail = ct_account_factory_sc_product['ProductViewDetail']['ProductViewSummary']
            ct_account_factory_sc_product_id = ct_account_factory_sc_product_detail['ProductId']
            ct_account_factory_sc_provisioning_artifacts = sc.list_provisioning_artifacts(ProductId=ct_account_factory_sc_product_id)['ProvisioningArtifactDetails']

            active_provisioning_artifact_id = [provisioning_artifact for provisioning_artifact in ct_account_factory_sc_provisioning_artifacts if provisioning_artifact['Active']][0]['Id']

            data['ActiveProvisioningArtifactId'] = active_provisioning_artifact_id

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  Account:
    Type: AWS::ServiceCatalog::CloudFormationProvisionedProduct
    Properties:
      ProductName: AWS Control Tower Account Factory
      ProvisionedProductName: !Ref AccountName
      ProvisioningArtifactId: !GetAtt ControlTowerServiceCatalogLookup.ActiveProvisioningArtifactId
      ProvisioningParameters:
        - Key: SSOUserEmail
          Value: !Ref SSOUserEmail
        - Key: AccountEmail
          Value: !Ref AccountEmail
        - Key: SSOUserFirstName
          Value: !Ref SSOUserFirstName
        - Key: SSOUserLastName
          Value: !Ref SSOUserLastName
        - Key: ManagedOrganizationalUnit
          Value: !Ref ManagedOrganizationalUnit
        - Key: AccountName
          Value: !Ref AccountName

Outputs:

  AccountId:
    Value: !GetAtt Account.Outputs.AccountId
