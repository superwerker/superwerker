AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  PipelineCloudformationRoleArn:
    Type: String

Resources:

  ControlTowerServiceCatalogLookup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ControlTowerServiceCatalogLookupCustomResource.Arn

  ControlTowerServiceCatalogLookupCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - servicecatalog:DescribeProductAsAdmin
                - servicecatalog:ListPortfoliosForProduct
              Resource: '*'
      InlineCode: |
        import boto3
        import cfnresponse

        sc = boto3.client("servicecatalog")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            ct_account_factory_sc_product = sc.describe_product_as_admin(
                Name='AWS Control Tower Account Factory'
            )

            ct_account_factory_sc_product_detail = ct_account_factory_sc_product['ProductViewDetail']['ProductViewSummary']
            ct_account_factory_sc_product_id = ct_account_factory_sc_product_detail['ProductId']
            ct_account_factory_portfolio_id = sc.list_portfolios_for_product(ProductId=ct_account_factory_sc_product_id)['PortfolioDetails'][0]['Id']
            data['PortfolioId'] = ct_account_factory_portfolio_id

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  CloudFormationRoleToAccountFactoryAssociation:
    Type: AWS::ServiceCatalog::PortfolioPrincipalAssociation
    Properties:
      PortfolioId: !GetAtt ControlTowerServiceCatalogLookup.PortfolioId
      PrincipalARN: !Ref PipelineCloudformationRoleArn
      PrincipalType: IAM

  ControlTowerBugWorkAroundArtifactLocation:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled

  ControlTowerBugWorkAroundArtifactLocationPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ControlTowerBugWorkAroundArtifactLocation
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: '*'
            Resource:
              - !GetAtt ControlTowerBugWorkAroundArtifactLocation.Arn
              - !Sub ${ControlTowerBugWorkAroundArtifactLocation.Arn}/*
            Principal:
              AWS: !GetAtt ControlTowerBugWorkAroundCanaryRole.Arn

  ControlTowerBugWorkAroundCanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess # fixme: least privilege
      Policies:
        - PolicyName: AllowS3List
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - cloudwatch:PutMetricData
                Resource: '*'

  # workaround for CT bug: trigger the `GetLandingZone` event once by reloading the dashboard
  # otherwise enrolling new accounts via tge CT Account Factory would fail with
  # "AWS Control Tower cannot create accounts until your landing zone is set up completely."

  ControlTowerBugWorkAroundCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: superwerker-ct-bug-wa
      ArtifactS3Location: !Sub s3://${ControlTowerBugWorkAroundArtifactLocation}
      ExecutionRoleArn: !GetAtt ControlTowerBugWorkAroundCanaryRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-3.8
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 300
      Schedule:
        Expression: rate(0 minute) # run once
      Code:
        Handler: pageLoadBlueprint.handler
        Script: !Sub |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const httpGet = url => {
            const https = require('https');
            return new Promise((resolve, reject) => {
              https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => resolve(body));
              }).on('error', reject);
            });
          };

          const flowBuilderBlueprint = async function () {
            let page = await synthetics.getPage();

            await synthetics.executeStep('consoleLogin', async function () {
              const AWS = require("aws-sdk");

              const federationEndpoint = 'https://signin.aws.amazon.com/federation';
              const issuer = 'superwerker';
              const destination = 'https://console.aws.amazon.com/';

              let credentials = await AWS.config.credentialProvider.resolve((err, cred) => { return cred; }).resolvePromise()

              const session = {
                sessionId: credentials.accessKeyId,
                sessionKey: credentials.secretAccessKey,
                sessionToken: credentials.sessionToken
              };

              const encodedSession = encodeURIComponent(JSON.stringify(session));
              const signinTokenUrl = `${!federationEndpoint}?Action=getSigninToken&SessionDuration=3600&Session=${!encodedSession}`;

              const signinResponse = await httpGet(signinTokenUrl);

              let consoleLoginUrl = `${!federationEndpoint}?Action=login&Issuer=${!issuer}&Destination=${!destination}&SigninToken=${!
                JSON.parse(signinResponse).SigninToken
              }`;

              await page.goto(consoleLoginUrl, {waitUntil: ['load', 'networkidle0']});

            });

            await synthetics.executeStep('controltowerdashboard', async function () {
              await page.goto("https://${AWS::Region}.console.aws.amazon.com/controltower/home/dashboard?region=${AWS::Region}", {waitUntil: ['load', 'networkidle0']});
            });
          };

          exports.handler = async () => {
            return await flowBuilderBlueprint();
          };
