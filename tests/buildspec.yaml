version: 0.2
env:
  shell: bash
batch:
  build-matrix:
    dynamic:
      env:
        variables:
          SUPERWERKER_REGION:
            - eu-west-1
            - eu-central-1
          UPDATE_FROM_LATEST_RELEASE:
            - true
            - false

phases:
  build:
    commands:
      # vend fresh account/org
      - python -m venv .venv
      - . .venv/bin/activate
      - pip3 install -r tests/requirements.txt
      - export PATH=/usr/local/bin:${PATH}
      - curl --version
      - aws --version
      - ovm_result=$(curl --fail --retry 10 -s ${ORGANIZATIONS_VENDING_MACHINE_ENDPOINT})
      - aws_account_id=$(echo $ovm_result | jq -r .account_id)
      - aws_cross_account_role_arn=$(echo $ovm_result | jq -r .cross_account_role)
      - echo AccountId ${aws_account_id} - Cross Account Role ${aws_cross_account_role_arn}

      # CDK synth && publish
      - export TEMPLATE_PREFIX=build/${CODEBUILD_SOURCE_VERSION}
      - export SUPERWERKER_VERSION=${CODEBUILD_SOURCE_VERSION}
      - cd cdk
      - yarn
      - yarn test
      - yarn synth
      - yarn publish-assets
      - aws s3 cp cdk.out/SuperwerkerStack.template.json s3://superwerker-deployment/${TEMPLATE_PREFIX}/templates/superwerker.template.yaml
      - aws s3 cp cdk.out/SuperwerkerStack.template.json s3://superwerker-deployment/${TEMPLATE_PREFIX}/templates/
      - cd -

      # setup AWS CLI to talk to vended account
      - aws configure --profile test_account set role_arn $aws_cross_account_role_arn
      - aws configure --profile test_account set credential_source EcsContainer

      # guard against intermittent errors by retrying more than the default 3
      - export AWS_MAX_ATTEMPTS=20

      # create IAM user and configure static access keypair in order to circumvent "The security token included in the request is invalid" errors in longer running processes like CloudFormation or the testsuite
      - aws --profile test_account iam create-user --user-name superwerker-tests
      - aws --profile test_account iam attach-user-policy --user-name superwerker-tests --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
      - eval $(aws --profile test_account iam create-access-key --user-name superwerker-tests | jq -r '.AccessKey | "export SUPERWERKER_AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport SUPERWERKER_AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\n"')

      - aws configure --profile test_account_iam_user_access set aws_access_key_id "${SUPERWERKER_AWS_ACCESS_KEY_ID}"
      - aws configure --profile test_account_iam_user_access set aws_secret_access_key "${SUPERWERKER_AWS_SECRET_ACCESS_KEY}"
      # wait for IAM eventual consistency
      - for i in {1..5}; do sleep 15; aws sts get-caller-identity --profile test_account_iam_user_access && break || exit 1; done

      # QUICK FIX
      - export UPDATE_FROM_LATEST_RELEASE=false
      - export SUPERWERKER_REGION=eu-west-1

      # setup superwerker in vended account
      - |
        template_url=https://superwerker-deployment.s3.${TEMPLATE_REGION}.amazonaws.com/${TEMPLATE_PREFIX}/templates/superwerker.template.yaml
        set -x
        echo "UPDATE_FROM_LATEST_RELEASE $UPDATE_FROM_LATEST_RELEASE"
        if $UPDATE_FROM_LATEST_RELEASE; then
          latest_release=$(curl --fail --retry 10 -s https://api.github.com/repos/superwerker/superwerker/releases/latest | jq -r '.name[1:]')
          previously_released_template_url=https://superwerker-releases.s3.${TEMPLATE_REGION}.amazonaws.com/${latest_release}/templates/superwerker.template.yaml
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation create-stack --stack-name superwerker --template-url ${previously_released_template_url} \
              --parameters ParameterKey=Domain,ParameterValue=${ROOT_MAIL_DOMAIN} \
                           ParameterKey=Subdomain,ParameterValue=${aws_account_id} \
                           ParameterKey=QSS3BucketName,ParameterValue=superwerker-releases \
                           ParameterKey=QSS3BucketRegion,ParameterValue=${TEMPLATE_REGION} \
                           ParameterKey=QSS3KeyPrefix,ParameterValue="${latest_release}/" \
                           ParameterKey=NotificationsMail,ParameterValue=root+notifications@${aws_account_id}.${ROOT_MAIL_DOMAIN} \
               --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --disable-rollback
          sleep 10 # work around race condition when multiple aws cli processes want to create the cache: [Errno 17] File exists: '/root/.aws/cli/cache'
          while ! domain_name_servers=$(aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} ssm get-parameter --name /superwerker/domain_name_servers --query Parameter.Value --output text); do sleep 10; done
          aws cloudformation deploy --stack-name superwerker-pipeline-dns-wiring-${aws_account_id} --template-file tests/pipeline-dns-wiring.yaml --parameter-overrides RootMailDelegationTarget=$domain_name_servers RootMailDomain=${ROOT_MAIL_DOMAIN} RootMailSubdomain=${aws_account_id} --no-fail-on-empty-changeset
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation wait stack-create-complete --stack-name superwerker || true  # needed as wait only waits for 60 minutes
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation wait stack-create-complete --stack-name superwerker
          # if superwerker update is tested, first update to superwerker version under test before running the tests
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation update-stack --stack-name superwerker --template-url ${template_url} \
              --parameters ParameterKey=Domain,ParameterValue=${ROOT_MAIL_DOMAIN} \
                           ParameterKey=Subdomain,ParameterValue=${aws_account_id} \
                           ParameterKey=NotificationsMail,ParameterValue=root+notifications@${aws_account_id}.${ROOT_MAIL_DOMAIN} \
              --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation wait stack-update-complete --stack-name superwerker
        else
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation create-stack --stack-name superwerker --template-url ${template_url} \
              --parameters ParameterKey=Domain,ParameterValue=${ROOT_MAIL_DOMAIN} \
                           ParameterKey=Subdomain,ParameterValue=${aws_account_id} \
                           ParameterKey=NotificationsMail,ParameterValue=root+notifications@${aws_account_id}.${ROOT_MAIL_DOMAIN} \
              --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --disable-rollback
          sleep 10 # work around race condition when multiple aws cli processes want to create the cache: [Errno 17] File exists: '/root/.aws/cli/cache'
          while ! domain_name_servers=$(aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} ssm get-parameter --name /superwerker/domain_name_servers --query Parameter.Value --output text); do sleep 10; done
          aws cloudformation deploy --stack-name superwerker-pipeline-dns-wiring-${aws_account_id} --template-file tests/pipeline-dns-wiring.yaml --parameter-overrides RootMailDelegationTarget=$domain_name_servers RootMailDomain=${ROOT_MAIL_DOMAIN} RootMailSubdomain=${aws_account_id} --no-fail-on-empty-changeset
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation wait stack-create-complete --stack-name superwerker || true  # needed as wait only waits for 60 minutes
          aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation wait stack-create-complete --stack-name superwerker
        fi

      # wire CT account factory SC product so that the cross account role can access the CT SC portfolio
      - aws --profile test_account --region ${SUPERWERKER_REGION} cloudformation deploy --stack-name superwerker-pipeline-account-factory-wiring --template-file tests/account-factory-wiring.yaml --parameter-overrides PipelineCloudformationRoleArn=$aws_cross_account_role_arn --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --no-fail-on-empty-changeset
      - aws --profile test_account --region ${SUPERWERKER_REGION} cloudformation deploy --stack-name superwerker-pipeline-account-factory-fixture --template-file tests/account-factory.yaml --parameter-overrides AccountName=sw-${aws_account_id} AccountEmail=root+test@${aws_account_id}.${ROOT_MAIL_DOMAIN} SSOUserFirstName=Isolde SSOUserLastName=Mawidder-Baden SSOUserEmail=root+test@${aws_account_id}.${ROOT_MAIL_DOMAIN} ManagedOrganizationalUnit=Sandbox --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --no-fail-on-empty-changeset

      - sleep 300 # give superwerker components some time to settle, e.g. SecurityHub member adding takes some minutes after account factory fixture has been rolled out
      - cd tests
      - rm -rf ~/.aws/cli/cache # run tests with fresh credentials
      - PYTEST_TIMEOUT=300 PYTHON_UNBUFFERED=1 AWS_REGION=${SUPERWERKER_REGION} AWS_DEFAULT_REGION=${SUPERWERKER_REGION} AWS_PROFILE=test_account ACCOUNT_FACTORY_ACCOUNT_ID=$(aws --profile test_account_iam_user_access --region ${SUPERWERKER_REGION} cloudformation describe-stacks --stack-name superwerker-pipeline-account-factory-fixture --query "Stacks[0].Outputs[?OutputKey=='AccountId'].OutputValue" --output text) python3 -m pytest -s --junitxml=./test-results.xml

    finally:
      # remove temp IAM user
      - aws --profile test_account iam delete-access-key --user-name superwerker-tests --access-key-id "${SUPERWERKER_AWS_ACCESS_KEY_ID}" || true
      - aws --profile test_account iam detach-user-policy --user-name superwerker-tests --policy-arn arn:aws:iam::aws:policy/AdministratorAccess || true
      - aws --profile test_account iam delete-user --user-name superwerker-tests || true

      # call sub-account closing and stack cleanup
      - |
        aws stepfunctions start-execution  --state-machine-arn ${SUPERWERKER_CLEANUP_STATE_MACHINE} --input '{"AWS_CROSS_ACCOUNT_ROLE_ARN": "'"${aws_cross_account_role_arn}"'", "AWS_ACCOUNT_ID": "'"${aws_account_id}"'", "SUPERWERKER_REGION": "'"${SUPERWERKER_REGION}"'"}'

reports:
  pytest_reports:
    base-directory: tests
    files:
      - test-results.xml
    file-format: JUNITXML
