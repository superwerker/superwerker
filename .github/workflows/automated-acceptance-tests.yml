name: Automated Acceptance Tests 
run-name: Deploy to ${{ inputs.account }} by @${{ github.actor }}

on:
  workflow_dispatch: 
    inputs:
      account:
        required: true
        default: 'pipeline01'
        type: choice
        description: 'The account to deploy to'
        options:
          - pipeline01
          - pipeline02

permissions:
  id-token: write
  contents: write

env:
  AWS_DEFAULT_REGION: eu-central-1

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.account }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Assume Superwerker AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_AAC_SUPERWERKER_RELEASE_ROLE }}

      - name: Build Superwerker
        run: |
          yarn global add aws-cdk
          yarn install
          yarn test
          yarn synth
          yarn publish-assets
        env:
          SUPERWERKER_VERSION: 0.0.0-AAC
          NODE_ENV: development
        shell: bash
        working-directory: cdk

      - name: Assume Pipeline AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_AAC_ROLE }}

      - name: Deploy Superwerker
        id: deploy-superwerker
        run: |
          nohup aws cloudformation deploy --stack-name superwerker --template-file ./cdk.out/SuperwerkerStack.template.json --parameter-overrides Domain=${SUPERWERKER_DOMAIN} Subdomain=${{ inputs.account }} NotificationsMail=root+notifications@${{ inputs.account }}.${SUPERWERKER_DOMAIN} --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM --disable-rollback  --no-cli-pager &
          while ! DOMAIN_NAME_SERVERS=$(aws ssm get-parameter --name /superwerker/domain_name_servers --query Parameter.Value --output text 2>/dev/null); do sleep 10; done
          echo "DOMAIN_NAME_SERVERS=${DOMAIN_NAME_SERVERS}" >> "$GITHUB_OUTPUT"
        env:
          SUPERWERKER_VERSION: 0.0.0-AAC
          SUPERWERKER_DOMAIN: ${{ secrets.SUPERWERKER_DOMAIN }}
        shell: bash
        working-directory: cdk

      - name: Assume Superwerker AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_AAC_SUPERWERKER_RELEASE_ROLE }}
      

      - name: Configure Subdomain Delegation
        run: |
          echo "Configuring subdomain delegation to nameservers ${DOMAIN_NAME_SERVERS}..." 
          aws cloudformation deploy --stack-name superwerker-pipeline-dns-wiring-${{ inputs.account }} --template-file ../tests/pipeline-dns-wiring.yaml --parameter-overrides RootMailDelegationTarget=${DOMAIN_NAME_SERVERS} RootMailDomain=${SUPERWERKER_DOMAIN} RootMailSubdomain=${{ inputs.account }}
        env:
          SUPERWERKER_VERSION: 0.0.0-AAC
          SUPERWERKER_DOMAIN: ${{ secrets.SUPERWERKER_DOMAIN }}
          DOMAIN_NAME_SERVERS: ${{ steps.deploy-superwerker.outputs.DOMAIN_NAME_SERVERS }}
        shell: bash
        working-directory: cdk

      - name: Assume Pipeline AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_AAC_ROLE }}

      - name: Wait for Superwerker Deployment
        run: |
          # check for existing change sets and execute them (might be caused by github actions not letting aws cli execute it)
          CHANGE_SET_IDS=$(aws cloudformation list-change-sets --stack-name superwerker --query 'Summaries[?starts_with(ChangeSetName, `awscli-cloudformation-`)].ChangeSetId' --output text --no-cli-pager)
          for CHANGE_SET_ID in $CHANGE_SET_IDS
          do
            echo "Change Set ${CHANGE_SET_ID} exists. Waiting for its completion."
            aws cloudformation  wait change-set-create-complete --change-set-name ${CHANGE_SET_ID}
            echo "Change Set ${CHANGE_SET_ID} is created. Executing..."
            aws cloudformation execute-change-set --change-set-name ${CHANGE_SET_ID} --disable-rollback 2>/dev/null || true
          done
          # https://github.com/aws/aws-cli/issues/2887
          echo "Waiting for completion of stack..."
          while [[ ! "$STACK_STATUS" == *"_FAILED" ]] && [[ ! "$STACK_STATUS" == *"_COMPLETE" ]]; do
            sleep 1
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name superwerker --query 'Stacks[0].StackStatus' --output text)
          done
          if [[ "$STACK_STATUS" == "CREATE_COMPLETE" ]] || [[ "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
            echo "Superwerker stack was successfully updated/created: StackStatus: $STACK_STATUS"
          else
            echo "Superwerker stack failed to update/create: StackStatus: $STACK_STATUS"
            exit 1
          fi
        shell: bash
      
  test:
    runs-on: ubuntu-latest
    environment: ${{ inputs.account }}
    needs: build_and_deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Assume Superwerker AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_AAC_ROLE }}
      
      - name: Run Acceptance Tests
        run: |
          make test
        shell: bash
        working-directory: tests

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: ./tests/test-results.xml
          summary: true
          # (Optional) Select which results should be included in the report.
          # Follows the same syntax as `pytest -r`
          display-options: fEsX
          # Fail the workflow if no JUnit XML was found.
          fail-on-empty: true
          # (Optional) Title of the test results section in the workflow summary
          title: Test results