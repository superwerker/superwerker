AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Sets up AWS ControlTower. (qs-1s3rsr7lh)

Parameters:
  AuditAWSAccountEmail:
    Type: String
  LogArchiveAWSAccountEmail:
    Type: String

Resources:

  SetupControlTowerCanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess # fixme: least privilege
      Policies:
        - PolicyName: AllowS3List
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - cloudwatch:PutMetricData
                Resource: '*'

  SetupControlTowerCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: superwerker-ct-setup
      ArtifactS3Location: !Sub s3://${SetupControlTowerArtifactLocation}
      ExecutionRoleArn: !GetAtt SetupControlTowerCanaryRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-3.1
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 600
      Schedule:
        DurationInSeconds: "3600"
        Expression: rate(0 minute)
      Code:
        Handler: pageLoadBlueprint.handler
        Script: !Sub |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const httpGet = url => {
            const https = require('https');
            return new Promise((resolve, reject) => {
              https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => resolve(body));
              }).on('error', reject);
            });
          };

          const flowBuilderBlueprint = async function () {
            let page = await synthetics.getPage();

            await synthetics.executeStep('consoleLogin', async function () {
              const AWS = require("aws-sdk");

              const federationEndpoint = 'https://signin.aws.amazon.com/federation';
              const issuer = 'superwerker';
              const destination = 'https://console.aws.amazon.com/';

              let credentials = await AWS.config.credentialProvider.resolve((err, cred) => { return cred; }).resolvePromise()

              const session = {
                sessionId: credentials.accessKeyId,
                sessionKey: credentials.secretAccessKey,
                sessionToken: credentials.sessionToken
              };

              const encodedSession = encodeURIComponent(JSON.stringify(session));
              const signinTokenUrl = `${!federationEndpoint}?Action=getSigninToken&SessionDuration=3600&Session=${!encodedSession}`;

              const signinResponse = await httpGet(signinTokenUrl);

              let consoleLoginUrl = `${!federationEndpoint}?Action=login&Issuer=${!issuer}&Destination=${!destination}&SigninToken=${!
                JSON.parse(signinResponse).SigninToken
              }`;

              await page.goto(consoleLoginUrl, {waitUntil: ['load', 'networkidle0']});

              // remove cookie banner if present
              try {
                page.waitForSelector('#awsccc-cb-buttons > button.awsccc-u-btn.awsccc-u-btn-primary');
                await page.click('#awsccc-cb-buttons > button.awsccc-u-btn.awsccc-u-btn-primary');
                await page.waitFor(1000);
              } catch (e) {
              }
            });

            await synthetics.executeStep('gotoCT', async function () {
              await page.goto("https://${AWS::Region}.console.aws.amazon.com/controltower/home?region=${AWS::Region}", {waitUntil: ['load', 'networkidle0']});
            });

            let landingZoneState;
            await synthetics.executeStep('gotoLlandingZoneCreation', async function () {

              if (await page.$('#get-started-btn > button') !== null) {
                landingZoneState = 'new';
                await page.click('#get-started-btn > button');
                await page.waitFor(10000); // waitForNavigation does not work here, so use sleep()
              } else {
                landingZoneState = 'existing';
                await page.goto('https://${AWS::Region}.console.aws.amazon.com/controltower/home/update?region=${AWS::Region}', {waitUntil: ['load', 'networkidle0']});
              }
            });

            if (landingZoneState == 'new') {
              await synthetics.executeStep('createLandingZone', async function () {
                let newUi
                try {
                  await page.waitForSelector("#regions-config-page")
                  newUi = true
                } catch (e) {
                  newUi = false
                }

                if (newUi) {
                  await page.waitForSelector("#ct-configure-landing-zone button.awsui-button-variant-primary:first-child")
                  await page.click("#ct-configure-landing-zone button.awsui-button-variant-primary:first-child")
                  await page.waitFor(3000)

                  await page.waitForSelector("#ct-configure-landing-zone button.awsui-button-variant-primary:first-child")
                  await page.click("#ct-configure-landing-zone button.awsui-button-variant-primary:first-child")
                  await page.waitFor(3000)

                  await page.waitForSelector("#aws-control-tower-log-archive-email")
                  await page.type("#aws-control-tower-log-archive-email input:first-child", "${LogArchiveAWSAccountEmail}")
                  await page.waitFor(3000)
                  await page.type("#aws-control-tower-cross-account-audit-email input:first-child", "${AuditAWSAccountEmail}")
                  await page.waitFor(3000)

                  // click somewhere else to trigger email address verification
                  await page.click("#aws-control-tower-cross-account-audit-name input:first-child")
                  await page.waitFor(10000)
                  // now it's possible to click the "next" button
                  await page.click("#ct-configure-landing-zone button.awsui-button-variant-primary:first-child")

                  await page.waitForSelector("#consent-checkbox")
                  await page.click("#consent-checkbox input:first-child")

                  await page.click("#ct-configure-landing-zone button.awsui-button-variant-primary:first-child")
                  await page.waitFor(10000)
                  await page.waitForNavigation({waitUntil: ['domcontentloaded']});
                } else {
                  await page.click("#awsui-input-0")
                  await page.waitFor(3000)
                  await page.click("#awsui-input-1")
                  await page.waitFor(3000)
                  await page.click("#awsui-input-2")
                  await page.waitFor(3000)
                  await page.type("#awsui-input-0", "${LogArchiveAWSAccountEmail}")
                  await page.waitFor(3000)
                  await page.type("#awsui-input-1", "${AuditAWSAccountEmail}")
                  await page.waitFor(3000)
                  await page.click("#awsui-checkbox-0")
                  await page.waitFor(10000); // wait for AWS UI to settle, then click
                  await page.click("#save-button > button");
                  await page.waitFor(10000)
                  await page.waitForNavigation({waitUntil: ['domcontentloaded']});
                }
              });
            } else {
                await synthetics.executeStep('updateLandingZone', async function () {
                  await page.click("#save-button > button")
                  await page.waitFor(10000)
                  await page.waitForNavigation({waitUntil: ['domcontentloaded']});
                });
            }

          };

          exports.handler = async () => {
            return await flowBuilderBlueprint();
          };

  SetupControlTowerArtifactLocation:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled


  SetupControlTowerArtifactLocationPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SetupControlTowerArtifactLocation
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: '*'
            Resource:
              - !GetAtt SetupControlTowerArtifactLocation.Arn
              - !Sub ${SetupControlTowerArtifactLocation.Arn}/*
            Principal:
              AWS: !GetAtt SetupControlTowerCanaryRole.Arn

  ControlTowerReadyHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  ControlTowerReadyHandleWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref ControlTowerReadyHandle
      Timeout: "7200"

  SuperwerkerBootstrapFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        SetupLandingZone: # event from entirely fresh landing zone
          Type: CloudWatchEvent
          Properties:
            InputPath: $.detail.serviceEventDetails.setupLandingZoneStatus
            Pattern:
              detail-type:
                - AWS Service Event via CloudTrail
              source:
                - aws.controltower
              detail:
                serviceEventDetails:
                  setupLandingZoneStatus:
                    state:
                      - SUCCEEDED
                eventName:
                  - SetupLandingZone
        UpdateLandingZone: # event from updated existing landing zone
          Type: CloudWatchEvent
          Properties:
            InputPath: $.detail.serviceEventDetails.updateLandingZoneStatus
            Pattern:
              detail-type:
                - AWS Service Event via CloudTrail
              source:
                - aws.controltower
              detail:
                serviceEventDetails:
                  updateLandingZoneStatus:
                    state:
                      - SUCCEEDED
                eventName:
                  - UpdateLandingZone

      Handler: index.handler
      Runtime: python3.7
      Environment:
        Variables:
          SIGNAL_URL: !Ref ControlTowerReadyHandle
      InlineCode: |-
        import boto3
        import json

        ssm = boto3.client('ssm')
        events = boto3.client('events')
        import urllib3
        import os

        def handler(event, context):
          for account in event['accounts']:
              ssm.put_parameter(
                  Name='/superwerker/account_id_{}'.format(account['accountName'].lower().replace(' ', '')),
                  Value=account['accountId'],
                  Overwrite=True,
                  Type='String',
              )

          # signal cloudformation stack that control tower setup is complete
          encoded_body = json.dumps({
              "Status": "SUCCESS",
              "Reason": "Control Tower Setup completed",
              "UniqueId": "doesthisreallyhavetobeunique",
              "Data": "Control Tower Setup completed"
          })
          http = urllib3.PoolManager()
          http.request('PUT', os.environ['SIGNAL_URL'], body=encoded_body)

          # signal Control Tower Landing ZOne Setup/Update has finished
          events.put_events(
              Entries=[
                  {
                      'DetailType': 'superwerker-event',
                      'Detail': json.dumps(
                          {
                              'eventName': 'LandingZoneSetupOrUpdateFinished',
                          }
                      ),
                      'Source': 'superwerker'
                  }
              ]
          )

      Policies:
        - Version: 2012-10-17
          Statement:
            - Action:
                - ssm:PutParameter
              Effect: Allow
              Resource:
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/superwerker*
            - Action: events:PutEvents
              Effect: Allow
              Resource: '*'

Metadata:
  SuperwerkerVersion: 0.0.0-DEVELOPMENT
